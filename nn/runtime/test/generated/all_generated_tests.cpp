// DO NOT EDIT;
// Generated by ml/nn/runtime/test/specs/generate_test.sh

namespace add {
std::vector<MixedTypedExample> examples = {
// Generated add test
#include "generated/examples/add.example.cpp"
};
// Generated model constructor
#include "generated/models/add.model.cpp"
} // namespace add
TEST_F(GeneratedTests, add) {
    Execute(add::CreateModel, add::examples);
}

namespace avg_pool_float {
std::vector<MixedTypedExample> examples = {
// Generated avg_pool_float test
#include "generated/examples/avg_pool_float.example.cpp"
};
// Generated model constructor
#include "generated/models/avg_pool_float.model.cpp"
} // namespace avg_pool_float
TEST_F(GeneratedTests, avg_pool_float) {
    Execute(avg_pool_float::CreateModel, avg_pool_float::examples);
}

namespace avg_pool_quant8 {
std::vector<MixedTypedExample> examples = {
// Generated avg_pool_quant8 test
#include "generated/examples/avg_pool_quant8.example.cpp"
};
// Generated model constructor
#include "generated/models/avg_pool_quant8.model.cpp"
} // namespace avg_pool_quant8
TEST_F(GeneratedTests, avg_pool_quant8) {
    Execute(avg_pool_quant8::CreateModel, avg_pool_quant8::examples);
}

namespace concat_float {
std::vector<MixedTypedExample> examples = {
// Generated concat_float test
#include "generated/examples/concat_float.example.cpp"
};
// Generated model constructor
#include "generated/models/concat_float.model.cpp"
} // namespace concat_float
TEST_F(GeneratedTests, concat_float) {
    Execute(concat_float::CreateModel, concat_float::examples);
}

namespace concat_quant8 {
std::vector<MixedTypedExample> examples = {
// Generated concat_quant8 test
#include "generated/examples/concat_quant8.example.cpp"
};
// Generated model constructor
#include "generated/models/concat_quant8.model.cpp"
} // namespace concat_quant8
TEST_F(GeneratedTests, concat_quant8) {
    Execute(concat_quant8::CreateModel, concat_quant8::examples);
}

namespace l2_pool_float {
std::vector<MixedTypedExample> examples = {
// Generated l2_pool_float test
#include "generated/examples/l2_pool_float.example.cpp"
};
// Generated model constructor
#include "generated/models/l2_pool_float.model.cpp"
} // namespace l2_pool_float
TEST_F(GeneratedTests, l2_pool_float) {
    Execute(l2_pool_float::CreateModel, l2_pool_float::examples);
}

namespace max_pool_float {
std::vector<MixedTypedExample> examples = {
// Generated max_pool_float test
#include "generated/examples/max_pool_float.example.cpp"
};
// Generated model constructor
#include "generated/models/max_pool_float.model.cpp"
} // namespace max_pool_float
TEST_F(GeneratedTests, max_pool_float) {
    Execute(max_pool_float::CreateModel, max_pool_float::examples);
}

namespace max_pool_quant8 {
std::vector<MixedTypedExample> examples = {
// Generated max_pool_quant8 test
#include "generated/examples/max_pool_quant8.example.cpp"
};
// Generated model constructor
#include "generated/models/max_pool_quant8.model.cpp"
} // namespace max_pool_quant8
TEST_F(GeneratedTests, max_pool_quant8) {
    Execute(max_pool_quant8::CreateModel, max_pool_quant8::examples);
}

namespace relu1_float {
std::vector<MixedTypedExample> examples = {
// Generated relu1_float test
#include "generated/examples/relu1_float.example.cpp"
};
// Generated model constructor
#include "generated/models/relu1_float.model.cpp"
} // namespace relu1_float
TEST_F(GeneratedTests, relu1_float) {
    Execute(relu1_float::CreateModel, relu1_float::examples);
}

namespace relu6_float {
std::vector<MixedTypedExample> examples = {
// Generated relu6_float test
#include "generated/examples/relu6_float.example.cpp"
};
// Generated model constructor
#include "generated/models/relu6_float.model.cpp"
} // namespace relu6_float
TEST_F(GeneratedTests, relu6_float) {
    Execute(relu6_float::CreateModel, relu6_float::examples);
}

namespace relu_float {
std::vector<MixedTypedExample> examples = {
// Generated relu_float test
#include "generated/examples/relu_float.example.cpp"
};
// Generated model constructor
#include "generated/models/relu_float.model.cpp"
} // namespace relu_float
TEST_F(GeneratedTests, relu_float) {
    Execute(relu_float::CreateModel, relu_float::examples);
}
